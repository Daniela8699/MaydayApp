#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("maydayapp:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// Setting up Socket.io
const io = require("socket.io")(server);

//Checking for connecting sockets and configuring them to react to events and send messages
io.on("connection", socket => {
  console.log("Socket Connection Established with ID :" + socket.id);
  socket.on("disconnect", () => {
    console.log("user disconnected");
  });

  //Join socket to the room corresponding to the private message of him with the destinatary
  socket.on('new_chat', data => {
    user1 = data.startedBy;
    user2 = data.chatsWith;
    if (user2 < user1){
      userTemp = user2;
      user2 = user1;
      user1 = userTemp;
    }
    channelName = user1+"$"+user2;
    socket.join(channelName);
  });

  //When socket sends a message, adds it to the database and emit it to the room of the private chat
  socket.on('message_sent', data => {
    messageFrom = data.from;
    messageTo = data.to;
    messageBody = data.msg;
    
    //TODO: AGREGAR A BD
    

    channelName = "";
    if (messageFrom < messageTo){
      channelName = messageFrom + "$" + messageTo;
    } else {
      channelName = messageTo + "$" + messageFrom;
    }
    socket.to(channelName).emit('message_received', {from: messageFrom, message: messageBody});
  });
  
  //Tells the client that server is ready to manage requests. 
  io.to(socket.id).emit('Server Ready', 'Ready');
});
